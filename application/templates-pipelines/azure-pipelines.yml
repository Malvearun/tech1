name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'Default'  

stages:

- stage: ApproveRelease_Build
  jobs:
    - template: approval.yml

- stage: Build
  dependsOn: ApproveRelease_Build
  displayName: 'Build Stage'
  jobs:
    - job: Build
      displayName: 'Build Job'
      pool:
        name: Default
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet
        continueOnError: false
      - script: |
            echo "Restoring packages..."
            dotnet restore ./PrimeService/PrimeService.csproj
            dotnet restore ./PrimeService.Tests/PrimeService.Tests.csproj
        displayName: 'Restore packages'

      - script: |
            echo "Building the solution..."
            dotnet build PrimeService/PrimeService.csproj --configuration Release
            dotnet build ./PrimeService.Tests/PrimeService.Tests.csproj --configuration Release
        displayName: 'Build Project'
        continueOnError: false

- stage: SonarQubeAnalysis
  dependsOn: Build
  displayName: 'SonarQube Analysis Stage'
  jobs:
    - template: sonarqube.yml
      parameters:
        SONAR_PROJECT_KEY: $(SONAR_PROJECT_KEY)
        SONAR_LINK: $(SONAR_LINK)
        SONAR_TOKEN: $(SONAR_TOKEN)

- stage: Test
  displayName: 'Test Stage'
  dependsOn: SonarQubeAnalysis
  jobs:
    - job: Test
      displayName: 'Test Job'
      pool:
        name: Default
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet
        continueOnError: false

      - script: dotnet test PrimeService.Tests/PrimeService.Tests.csproj --configuration Release --results-directory $(Pipeline.Workspace)/test-results --logger "trx;LogFileName=test_unit_results.trx"
        displayName: 'Run Tests'
        continueOnError: false

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Test
  jobs:
    - job: Deploy
      displayName: 'Deployment Job'
      pool:
        name: Default
      continueOnError: false
      steps:
      - script: echo 'TODO – Deployment'
        displayName: 'TODO – Deployment'
        continueOnError: false

- stage: PublishArtifacts
  displayName: 'Publish All Pipeline Logs'
  dependsOn: Deploy
  jobs:
    - job: PublishPipelineLogs
      displayName: 'Publish Pipeline Logs Job'
      pool:
        name: Default # Self-hosted agent pool
      timeoutInMinutes: 10 # Set job timeout to 10 minutes
      steps:
      - script: |
          # Create a directory for logs
          mkdir -p $(Agent.TempDirectory)/pipeline_logs

          # Copy all logs from the agent temp directory
          echo "Copying pipeline logs..."
          cp -r $(Agent.TempDirectory)/* $(Agent.TempDirectory)/pipeline_logs/

          # Additionally, copy logs from the pipeline workspace if needed
          if [ -d "$(Pipeline.Workspace)" ]; then
              echo "Copying workspace logs..."
              cp -r $(Pipeline.Workspace)/* $(Agent.TempDirectory)/pipeline_logs/
          fi
        displayName: 'Copy All Logs to Temp Directory'

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Agent.TempDirectory)/pipeline_logs
          includeRootFolder: false
          archiveFile: $(Agent.TempDirectory)/all_pipeline_logs.zip
          replaceExistingArchive: true
        displayName: 'Archive All Pipeline Logs'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(Agent.TempDirectory)/all_pipeline_logs.zip
          artifact: all-pipeline-logs
        displayName: 'Publish All Pipeline Logs as Artifact'
